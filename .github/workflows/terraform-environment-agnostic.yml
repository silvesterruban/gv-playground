name: Terraform Environment-Agnostic Deployment

on:
  push:
    branches: [ main, develop, feature/terraform-environment-agnostic ]
    paths:
      - 'infrastructure/**'
      - '.github/workflows/terraform-environment-agnostic.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'infrastructure/**'
      - '.github/workflows/terraform-environment-agnostic.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'gv-playground'
        type: choice
        options:
          - gv-playground
          - dev
          - staging
          - prod
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  AWS_REGION: us-east-1
  TF_VERSION: '1.6.0'

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event.inputs.action == 'plan'
    
    strategy:
      matrix:
        environment: [gv-playground, dev, staging, prod]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      working-directory: ./infrastructure

    - name: Terraform Init
      run: |
        cd infrastructure
        terraform init -backend-config="./environments/${{ matrix.environment }}/backend.tfvars" \
                      -var-file="./environments/${{ matrix.environment }}/terraform.tfvars"

    - name: Terraform Validate
      run: terraform validate
      working-directory: ./infrastructure

    - name: Terraform Plan
      run: |
        cd infrastructure
        terraform plan -var="environment=${{ matrix.environment }}" \
                      -var-file="./environments/${{ matrix.environment }}/terraform.tfvars" \
                      -out="${{ matrix.environment }}.tfplan"
      continue-on-error: true

    - name: Upload Plan Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: terraform-plan-${{ matrix.environment }}
        path: infrastructure/${{ matrix.environment }}.tfplan
        retention-days: 5

  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event.inputs.action == 'apply'
    
    environment: ${{ github.event.inputs.environment || 'gv-playground' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Download Plan Artifacts
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan-${{ github.event.inputs.environment || 'gv-playground' }}
        path: infrastructure/

    - name: Terraform Init
      run: |
        cd infrastructure
        terraform init -backend-config="./environments/${{ github.event.inputs.environment || 'gv-playground' }}/backend.tfvars" \
                      -var-file="./environments/${{ github.event.inputs.environment || 'gv-playground' }}/terraform.tfvars"

    - name: Terraform Apply
      run: |
        cd infrastructure
        terraform apply -auto-approve "${{ github.event.inputs.environment || 'gv-playground' }}.tfplan"

    - name: Update Kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ github.event.inputs.environment || 'gv-playground' }}-eks-cluster

    - name: Verify EKS Cluster
      run: |
        kubectl get nodes
        kubectl get pods --all-namespaces

    - name: Output Infrastructure Details
      run: |
        cd infrastructure
        terraform output -json > infrastructure-outputs.json
        echo "## Infrastructure Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ github.event.inputs.environment || 'gv-playground' }}" >> $GITHUB_STEP_SUMMARY
        echo "**EKS Cluster:** $(terraform output -raw eks_cluster_name)" >> $GITHUB_STEP_SUMMARY
        echo "**ALB URL:** $(terraform output -raw application_url)" >> $GITHUB_STEP_SUMMARY
        echo "**Database Endpoint:** $(terraform output -raw rds_endpoint)" >> $GITHUB_STEP_SUMMARY

  terraform-destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'destroy'
    
    environment: ${{ github.event.inputs.environment || 'gv-playground' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: |
        cd infrastructure
        terraform init -backend-config="./environments/${{ github.event.inputs.environment || 'gv-playground' }}/backend.tfvars" \
                      -var-file="./environments/${{ github.event.inputs.environment || 'gv-playground' }}/terraform.tfvars"

    - name: Terraform Destroy
      run: |
        cd infrastructure
        terraform destroy -auto-approve -var="environment=${{ github.event.inputs.environment || 'gv-playground' }}" \
                         -var-file="./environments/${{ github.event.inputs.environment || 'gv-playground' }}/terraform.tfvars"

  security-scan:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  notify:
    name: 'Notify Deployment Status'
    runs-on: ubuntu-latest
    needs: [terraform-apply]
    if: always() && (needs.terraform-apply.result == 'success' || needs.terraform-apply.result == 'failure')
    
    steps:
    - name: Notify Success
      if: needs.terraform-apply.result == 'success'
      run: |
        echo "‚úÖ Terraform deployment to ${{ github.event.inputs.environment || 'gv-playground' }} completed successfully!"
        echo "üîó Application URL: http://gv-playground-alb-727046293.us-east-1.elb.amazonaws.com"
        echo "üìä EKS Cluster: gv-playground-eks-cluster"

    - name: Notify Failure
      if: needs.terraform-apply.result == 'failure'
      run: |
        echo "‚ùå Terraform deployment to ${{ github.event.inputs.environment || 'gv-playground' }} failed!"
        echo "Please check the logs for details."