name: Build and Deploy Village Platform

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'k8s/**'
      - '.github/workflows/build-and-deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'k8s/**'

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: 898307279366.dkr.ecr.us-east-1.amazonaws.com
  EKS_CLUSTER_NAME: playground-eks-cluster

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json

    - name: Install backend dependencies
      run: |
        cd backend
        npm ci

    - name: Run backend tests
      run: |
        cd backend
        npm test

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run frontend tests
      run: |
        cd frontend
        npm test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push backend image
      env:
        ECR_REPOSITORY: gv-playground-backend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd backend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Build, tag, and push frontend image
      env:
        ECR_REPOSITORY: gv-playground-frontend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd frontend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Create secrets
      run: |
        kubectl create secret generic village-secrets \
          --from-literal=database-url="${{ secrets.DATABASE_URL }}" \
          --from-literal=jwt-secret="${{ secrets.JWT_SECRET }}" \
          --from-literal=aws-access-key-id="${{ secrets.AWS_ACCESS_KEY_ID }}" \
          --from-literal=aws-secret-access-key="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy backend
      run: |
        kubectl apply -f k8s/backend-deployment.yaml

    - name: Deploy frontend
      run: |
        kubectl apply -f k8s/frontend-deployment.yaml

    - name: Deploy ingress
      run: |
        kubectl apply -f k8s/ingress.yaml

    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/village-backend --timeout=300s
        kubectl rollout status deployment/village-frontend --timeout=300s

    - name: Get ingress URL
      run: |
        kubectl get ingress village-platform-ingress -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
        echo "Deployment complete! Access your application at the URL above."