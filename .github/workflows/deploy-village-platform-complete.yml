name: Deploy Village Platform to GV Playground

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: playground-eks-cluster
  ECR_REGISTRY: 898307279366.dkr.ecr.us-east-1.amazonaws.com
  BACKEND_IMAGE: village-backend
  FRONTEND_IMAGE: village-frontend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        path: gv-playground

    - name: Checkout Village Platform
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository }}
        path: village-platform
        ref: main

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./village-platform/backend
        push: true
        tags: |
          ${{ env.ECR_REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest
          ${{ env.ECR_REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./village-platform/frontend
        push: true
        tags: |
          ${{ env.ECR_REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest
          ${{ env.ECR_REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Create ECR authentication secret
      run: |
        kubectl create secret docker-registry ecr-registry-secret \
          --docker-server=${{ env.ECR_REGISTRY }} \
          --docker-username=AWS \
          --docker-password=$(aws ecr get-login-password --region ${{ env.AWS_REGION }}) \
          --docker-email=no-reply@village-platform.com \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Create service account with ECR access
      run: |
        kubectl apply -f - <<EOF
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: ecr-access-sa
          namespace: default
        imagePullSecrets:
        - name: ecr-registry-secret
        EOF

    - name: Deploy Village Platform Backend
      run: |
        kubectl apply -f - <<EOF
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: village-backend-real
          labels:
            app: village-backend-real
        spec:
          replicas: 2
          selector:
            matchLabels:
              app: village-backend-real
          template:
            metadata:
              labels:
                app: village-backend-real
            spec:
              serviceAccountName: ecr-access-sa
              containers:
              - name: village-backend
                image: ${{ env.ECR_REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest
                ports:
                - containerPort: 3001
                env:
                - name: NODE_ENV
                  value: "production"
                - name: PORT
                  value: "3001"
                - name: DATABASE_URL
                  valueFrom:
                    secretKeyRef:
                      name: village-platform-secrets
                      key: database-url
                - name: JWT_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: village-platform-secrets
                      key: jwt-secret
                resources:
                  requests:
                    memory: "256Mi"
                    cpu: "250m"
                  limits:
                    memory: "512Mi"
                    cpu: "500m"
                livenessProbe:
                  httpGet:
                    path: /health
                    port: 3001
                  initialDelaySeconds: 30
                  periodSeconds: 10
                readinessProbe:
                  httpGet:
                    path: /health
                    port: 3001
                  initialDelaySeconds: 5
                  periodSeconds: 5
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: village-backend-real-service
          labels:
            app: village-backend-real
        spec:
          selector:
            app: village-backend-real
          ports:
          - port: 3001
            targetPort: 3001
            protocol: TCP
          type: ClusterIP
        EOF

    - name: Deploy Village Platform Frontend
      run: |
        kubectl apply -f - <<EOF
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: village-frontend-real
          labels:
            app: village-frontend-real
        spec:
          replicas: 2
          selector:
            matchLabels:
              app: village-frontend-real
          template:
            metadata:
              labels:
                app: village-frontend-real
            spec:
              serviceAccountName: ecr-access-sa
              containers:
              - name: village-frontend
                image: ${{ env.ECR_REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest
                ports:
                - containerPort: 8081
                env:
                - name: REACT_APP_API_URL
                  value: "http://village-backend-real-service:3001"
                resources:
                  requests:
                    memory: "128Mi"
                    cpu: "100m"
                  limits:
                    memory: "256Mi"
                    cpu: "200m"
                livenessProbe:
                  httpGet:
                    path: /health
                    port: 8081
                  initialDelaySeconds: 30
                  periodSeconds: 10
                readinessProbe:
                  httpGet:
                    path: /health
                    port: 8081
                  initialDelaySeconds: 5
                  periodSeconds: 5
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: village-frontend-real-service
          labels:
            app: village-frontend-real
        spec:
          selector:
            app: village-frontend-real
          ports:
          - port: 8081
            targetPort: 8081
            protocol: TCP
          type: ClusterIP
        EOF

    - name: Deploy LoadBalancer Service
      run: |
        kubectl apply -f - <<EOF
        apiVersion: v1
        kind: Service
        metadata:
          name: village-platform-lb
          labels:
            app: village-platform
        spec:
          type: LoadBalancer
          ports:
          - port: 80
            targetPort: 8081
            protocol: TCP
            name: http
          selector:
            app: village-frontend-real
        EOF

    - name: Wait for deployment to be ready
      run: |
        kubectl rollout status deployment/village-backend-real --timeout=300s
        kubectl rollout status deployment/village-frontend-real --timeout=300s

    - name: Get LoadBalancer URL
      run: |
        echo "Waiting for LoadBalancer to get external IP..."
        kubectl get service village-platform-lb -w --timeout=300s
        EXTERNAL_IP=$(kubectl get service village-platform-lb -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        echo "Village Platform is accessible at: http://$EXTERNAL_IP"
        echo "::set-output name=url::http://$EXTERNAL_IP"

    - name: Verify deployment
      run: |
        kubectl get pods -l app=village-backend-real
        kubectl get pods -l app=village-frontend-real
        kubectl get services