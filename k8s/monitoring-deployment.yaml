apiVersion: apps/v1
kind: Deployment
metadata:
  name: monitoring-dashboard
  namespace: default
  labels:
    app: monitoring-dashboard
spec:
  replicas: 1
  selector:
    matchLabels:
      app: monitoring-dashboard
  template:
    metadata:
      labels:
        app: monitoring-dashboard
    spec:
      containers:
      - name: monitoring
        image: nginx:alpine
        ports:
        - containerPort: 80
        command: ["/bin/sh"]
        args:
          - -c
          - |
            cat > /etc/nginx/nginx.conf << 'EOF'
            events {
                worker_connections 1024;
            }
            http {
                include /etc/nginx/mime.types;
                default_type application/octet-stream;
                
                server {
                    listen 80;
                    server_name localhost;
                    
                    location /health {
                        add_header Content-Type application/json;
                        return 200 '{"status":"OK","service":"monitoring-dashboard","timestamp":"$(date -u +%Y-%m-%dT%H:%M:%SZ)","uptime":"$(uptime)"}';
                    }
                    
                    location /metrics {
                        add_header Content-Type application/json;
                        return 200 '{"pods":{"total":$(kubectl get pods --no-headers | wc -l),"running":$(kubectl get pods --no-headers | grep Running | wc -l),"pending":$(kubectl get pods --no-headers | grep Pending | wc -l),"failed":$(kubectl get pods --no-headers | grep -E "Failed|CrashLoopBackOff" | wc -l)},"services":{"total":$(kubectl get services --no-headers | wc -l),"loadbalancers":$(kubectl get services --no-headers | grep LoadBalancer | wc -l)},"nodes":{"total":$(kubectl get nodes --no-headers | wc -l),"ready":$(kubectl get nodes --no-headers | grep Ready | wc -l)}}';
                    }
                    
                    location /dashboard {
                        add_header Content-Type text/html;
                        return 200 '<!DOCTYPE html>
                        <html>
                        <head>
                            <title>GV Playground Monitoring Dashboard</title>
                            <style>
                                body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
                                .container { max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                                h1 { color: #2c3e50; text-align: center; }
                                .status-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin: 20px 0; }
                                .status-card { background: #ecf0f1; padding: 20px; border-radius: 8px; border-left: 4px solid #3498db; }
                                .status-card h3 { margin: 0 0 10px 0; color: #2c3e50; }
                                .metric { display: flex; justify-content: space-between; margin: 5px 0; }
                                .metric-value { font-weight: bold; color: #27ae60; }
                                .refresh-btn { background: #3498db; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; margin: 10px 0; }
                                .refresh-btn:hover { background: #2980b9; }
                            </style>
                        </head>
                        <body>
                            <div class="container">
                                <h1>üöÄ GV Playground Monitoring Dashboard</h1>
                                <button class="refresh-btn" onclick="location.reload()">üîÑ Refresh</button>
                                
                                <div class="status-grid">
                                    <div class="status-card">
                                        <h3>üìä System Health</h3>
                                        <div class="metric">
                                            <span>Status:</span>
                                            <span class="metric-value" id="system-status">Loading...</span>
                                        </div>
                                        <div class="metric">
                                            <span>Uptime:</span>
                                            <span class="metric-value" id="uptime">Loading...</span>
                                        </div>
                                        <div class="metric">
                                            <span>Memory:</span>
                                            <span class="metric-value" id="memory">Loading...</span>
                                        </div>
                                        <div class="metric">
                                            <span>CPU:</span>
                                            <span class="metric-value" id="cpu">Loading...</span>
                                        </div>
                                    </div>
                                    
                                    <div class="status-card">
                                        <h3>üê≥ Pod Status</h3>
                                        <div class="metric">
                                            <span>Total Pods:</span>
                                            <span class="metric-value" id="total-pods">Loading...</span>
                                        </div>
                                        <div class="metric">
                                            <span>Running:</span>
                                            <span class="metric-value" id="running-pods">Loading...</span>
                                        </div>
                                        <div class="metric">
                                            <span>Pending:</span>
                                            <span class="metric-value" id="pending-pods">Loading...</span>
                                        </div>
                                        <div class="metric">
                                            <span>Failed:</span>
                                            <span class="metric-value" id="failed-pods">Loading...</span>
                                        </div>
                                    </div>
                                    
                                    <div class="status-card">
                                        <h3>üåê Services</h3>
                                        <div class="metric">
                                            <span>Total Services:</span>
                                            <span class="metric-value" id="total-services">Loading...</span>
                                        </div>
                                        <div class="metric">
                                            <span>Load Balancers:</span>
                                            <span class="metric-value" id="loadbalancers">Loading...</span>
                                        </div>
                                    </div>
                                    
                                    <div class="status-card">
                                        <h3>üñ•Ô∏è Nodes</h3>
                                        <div class="metric">
                                            <span>Total Nodes:</span>
                                            <span class="metric-value" id="total-nodes">Loading...</span>
                                        </div>
                                        <div class="metric">
                                            <span>Ready:</span>
                                            <span class="metric-value" id="ready-nodes">Loading...</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <script>
                                async function loadMetrics() {
                                    try {
                                        const response = await fetch("/metrics");
                                        const data = await response.json();
                                        
                                        document.getElementById("total-pods").textContent = data.pods.total;
                                        document.getElementById("running-pods").textContent = data.pods.running;
                                        document.getElementById("pending-pods").textContent = data.pods.pending;
                                        document.getElementById("failed-pods").textContent = data.pods.failed;
                                        document.getElementById("total-services").textContent = data.services.total;
                                        document.getElementById("loadbalancers").textContent = data.services.loadbalancers;
                                        document.getElementById("total-nodes").textContent = data.nodes.total;
                                        document.getElementById("ready-nodes").textContent = data.nodes.ready;
                                    } catch (error) {
                                        console.error("Error loading metrics:", error);
                                    }
                                }
                                
                                async function loadHealth() {
                                    try {
                                        const response = await fetch("/health");
                                        const data = await response.json();
                                        
                                        document.getElementById("system-status").textContent = data.status;
                                        document.getElementById("uptime").textContent = data.uptime;
                                        document.getElementById("memory").textContent = data.memory;
                                        document.getElementById("cpu").textContent = data.cpu;
                                    } catch (error) {
                                        console.error("Error loading health:", error);
                                    }
                                }
                                
                                // Load data on page load
                                loadHealth();
                                loadMetrics();
                                
                                // Refresh every 30 seconds
                                setInterval(() => {
                                    loadHealth();
                                    loadMetrics();
                                }, 30000);
                            </script>
                        </body>
                        </html>';
                    }
                    
                    location / {
                        add_header Content-Type application/json;
                        return 200 '{"message":"GV Playground Monitoring Dashboard","endpoints":["/health","/metrics","/dashboard"],"status":"running"}';
                    }
                }
            }
            EOF
            nginx -g "daemon off;"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: monitoring-dashboard-service
  namespace: default
  labels:
    app: monitoring-dashboard
spec:
  selector:
    app: monitoring-dashboard
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: monitoring-dashboard-lb
  namespace: default
  labels:
    app: monitoring-dashboard
spec:
  selector:
    app: monitoring-dashboard
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
  type: LoadBalancer